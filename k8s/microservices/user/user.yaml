apiVersion: apps/v1
kind: Deployment
metadata:
  name: tg-user
  namespace: user
spec:
  selector:
    matchLabels:
      app: tg-user
  replicas: 1
  template:
    metadata:
      labels:
        app: tg-user
    spec:
      containers:
        - name: tg-user
          image: dopeteam/tg-user:latest
          imagePullPolicy: Always
          ports:
            - containerPort: 8080
          env:
            - name: KAKAO_CLIENT_ID
              valueFrom:
                configMapKeyRef:
                  name: user-service-config
                  key: KAKAO_CLIENT_ID
            - name: KAKAO_REDIRECT_URI
              valueFrom:
                configMapKeyRef:
                  name: user-service-config
                  key: KAKAO_REDIRECT_URI
            - name: KAKAO_API_URL_TOKEN
              valueFrom:
                configMapKeyRef:
                  name: user-service-config
                  key: KAKAO_API_URL_TOKEN
            - name: KAKAO_API_URL_INFORMATION
              valueFrom:
                configMapKeyRef:
                  name: user-service-config
                  key: KAKAO_API_URL_INFORMATION
            - name: S3_ACCESS_KEY
              valueFrom:
                configMapKeyRef:
                  name: user-service-config
                  key: S3_ACCESS_KEY
            - name: S3_SECRET_KEY
              valueFrom:
                configMapKeyRef:
                  name: user-service-config
                  key: S3_SECRET_KEY
            - name: S3_REGION_STATIC
              valueFrom:
                configMapKeyRef:
                  name: user-service-config
                  key: S3_REGION_STATIC
            - name: S3_BUCKET
              valueFrom:
                configMapKeyRef:
                  name: user-service-config
                  key: S3_BUCKET
            - name: S3_DIRECTORY_IMAGE
              valueFrom:
                configMapKeyRef:
                  name: user-service-config
                  key: S3_DIRECTORY_IMAGE
            - name: S3_DIRECTORY_PROFILE
              valueFrom:
                configMapKeyRef:
                  name: user-service-config
                  key: S3_DIRECTORY_PROFILE
            - name: DB_URL
              valueFrom:
                configMapKeyRef:
                  name: user-service-config
                  key: DB_URL
            - name: DB_USERNAME
              valueFrom:
                configMapKeyRef:
                  name: user-service-config
                  key: DB_USERNAME
            - name: DB_PASSWORD
              valueFrom:
                configMapKeyRef:
                  name: user-service-config
                  key: DB_PASSWORD
            - name: REDIS_HOST
              valueFrom:
                configMapKeyRef:
                  name: user-service-config
                  key: REDIS_HOST
            - name: REDIS_PORT
              valueFrom:
                configMapKeyRef:
                  name: user-service-config
                  key: REDIS_PORT
            - name: REDIS_PASSWORD
              valueFrom:
                configMapKeyRef:
                  name: user-service-config
                  key: REDIS_PASSWORD
            - name: KAFKA_HOST
              valueFrom:
                configMapKeyRef:
                  name: user-service-config
                  key: KAFKA_HOST
            - name: MODULE_COMMUNITY_URL
              valueFrom:
                configMapKeyRef:
                  name: user-service-config
                  key: MODULE_COMMUNITY_URL

---

apiVersion: v1
kind: Service
metadata:
  name: tg-user-svc
  namespace: user
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/path: /api/user/actuator/prometheus
    prometheus.io/port: "8080"
spec:
  selector:
    app: tg-user
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: 8080

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: tg-user-ingress
  namespace: user
  annotations:
    ingress.kubernetes.io/ssl-redirect: "true"
    # nginx.ingress.kubernetes.io/rewrite-target: /api/user/
    kubernetes.io/tls-acme: "true"
    cert-manager.io/cluster-issuer: letsencrypt-prod
spec:
  tls:
    - hosts:
        - dope.yanychoi.site
      secretName: ingress-tls-secrets
  ingressClassName: nginx
  rules:
    - host: dope.yanychoi.site
      http:
        paths:
          - path: /api/user
            pathType: Prefix
            backend:
              service:
                name: tg-user-svc
                port:
                  number: 8080
